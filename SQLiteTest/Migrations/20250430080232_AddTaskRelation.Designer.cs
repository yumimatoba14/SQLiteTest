// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLiteTest.Models;

namespace SQLiteTest.Migrations
{
    [DbContext(typeof(WfDbContext))]
    [Migration("20250430080232_AddTaskRelation")]
    partial class AddTaskRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("SQLiteTest.Models.Task", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT");

                    b.HasKey("WorkflowId", "SubId");

                    b.HasIndex("WorkflowId", "SubId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SQLiteTest.Models.TaskRelation", b =>
                {
                    b.Property<int>("WorkflowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrevTaskSubId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextTaskSubId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkflowId", "PrevTaskSubId", "NextTaskSubId");

                    b.HasIndex("WorkflowId", "NextTaskSubId");

                    b.HasIndex("WorkflowId", "PrevTaskSubId", "NextTaskSubId")
                        .IsUnique();

                    b.ToTable("TaskRelations");
                });

            modelBuilder.Entity("SQLiteTest.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("SQLiteTest.Models.Task", b =>
                {
                    b.HasOne("SQLiteTest.Models.Workflow", "Workflow")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SQLiteTest.Models.TaskRelation", b =>
                {
                    b.HasOne("SQLiteTest.Models.Task", "NextTask")
                        .WithMany("PrevTaskRelations")
                        .HasForeignKey("WorkflowId", "NextTaskSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLiteTest.Models.Task", "PrevTask")
                        .WithMany("NextTaskRelations")
                        .HasForeignKey("WorkflowId", "PrevTaskSubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
